Dump of assembler code for function fibonacci:
   0x08048b00 <+0>:	push   %esi
   0x08048b01 <+1>:	push   %ebx
   0x08048b02 <+2>:	mov    0xc(%esp),%esi
   0x08048b06 <+6>:	test   %esi,%esi
   0x08048b08 <+8>:	js     0x8048b36 <fibonacci+54>
   0x08048b0a <+10>:	add    $0x1,%esi
   0x08048b0d <+13>:	xor    %edx,%edx
   0x08048b0f <+15>:	xor    %eax,%eax
   0x08048b11 <+17>:	mov    $0x1,%ecx
   0x08048b16 <+22>:	xor    %ebx,%ebx
   0x08048b18 <+24>:	jmp    0x8048b2c <fibonacci+44>
   0x08048b1a <+26>:	lea    0x0(%esi),%esi
   0x08048b20 <+32>:	cmp    $0x1,%edx
   0x08048b23 <+35>:	jle    0x8048b3a <fibonacci+58>
   0x08048b25 <+37>:	lea    (%ebx,%ecx,1),%eax
   0x08048b28 <+40>:	mov    %ecx,%ebx
   0x08048b2a <+42>:	mov    %eax,%ecx
   0x08048b2c <+44>:	add    $0x1,%edx
   0x08048b2f <+47>:	cmp    %esi,%edx
   0x08048b31 <+49>:	jne    0x8048b20 <fibonacci+32>
   0x08048b33 <+51>:	pop    %ebx
   0x08048b34 <+52>:	pop    %esi
   0x08048b35 <+53>:	ret    
   0x08048b36 <+54>:	xor    %eax,%eax
   0x08048b38 <+56>:	jmp    0x8048b33 <fibonacci+51>
   0x08048b3a <+58>:	mov    %edx,%eax
   0x08048b3c <+60>:	jmp    0x8048b2c <fibonacci+44>
End of assembler dump.

